<?xml version="1.0" encoding="utf-8"?>
<dialect name='ExasolTDDDialect'
         class='exasol_odbc'
         version='18.1'>
  <function-map>
    <function group='numeric' name='ABS' return-type='real'>
      <formula>ABS(%1)</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='ABS' return-type='int'>
      <formula>ABS(%1)</formula>
      <argument type='int' />
    </function>
    <function group='numeric' name='ACOS' return-type='real'>
      <formula>ACOS(%1)</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='ASIN' return-type='real'>
      <formula>ASIN(%1)</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='ATAN' return-type='real'>
      <formula>ATAN(%1)</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='ATAN2' return-type='real'>
      <formula>ATAN2(%1,%2)</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='numeric' name='CEILING' return-type='int'>
      <formula>CAST({fn CEILING(%1)} AS BIGINT)</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='COS' return-type='real'>
      <formula>COS(%1)</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='COT' return-type='real'>
      <formula>CASE WHEN TAN(%1) = 0 THEN NULL ELSE 1/TAN(%1) END</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='DEGREES' return-type='real'>
      <formula>(%1 * 45 / ATAN(1))</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='DIV' return-type='int'>
      <formula>CASE WHEN %2 = 0 THEN NULL ELSE DIV(%1,%2) END</formula>
      <argument type='int' />
      <argument type='int' />
    </function>
    <function group='numeric' name='EXP' return-type='real'>
      <formula>EXP(%1)</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='FLOOR' return-type='int'>
      <formula>CAST({fn FLOOR(%1)} AS BIGINT)</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='HEXBINX' return-type='real'>
      <formula>(((CASE WHEN (ABS((%2) - (CAST( ( (%2) / SQRT(3.0) ) AS NUMERIC(18, 0) ) * SQRT(3.0)))) + SQRT(3.0) * ((ABS((%1) - (CAST( ( (%1) / 3.0 ) AS NUMERIC(18, 0) ) * 3.0))) - 1.0) &gt; 0.0 THEN 1.5 ELSE 0.0 END) - (CASE WHEN ((%1) - (CAST( ( (%1) / 3.0 ) AS NUMERIC(18, 0) ) * 3.0) &lt; 0.0) AND ((CASE WHEN (ABS((%2) - (CAST( ( (%2) / SQRT(3.0) ) AS NUMERIC(18, 0) ) * SQRT(3.0)))) + SQRT(3.0) * ((ABS((%1) - (CAST( ( (%1) / 3.0 ) AS NUMERIC(18, 0) ) * 3.0))) - 1.0) &gt; 0.0 THEN 1.5 ELSE 0.0 END) &gt; 0.0) THEN 3.0 ELSE 0.0 END)) + (CAST( ( (%1) / 3.0 ) AS NUMERIC(18, 0) ) * 3.0))</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='numeric' name='HEXBINY' return-type='real'>
      <formula>CAST( (((CASE WHEN (ABS((%2) - (CAST( ( (%2) / SQRT(3.0) ) AS NUMERIC(18, 0) ) * SQRT(3.0)))) + SQRT(3.0) * ((ABS((%1) - (CAST( ( (%1) / 3.0 ) AS NUMERIC(18, 0) ) * 3.0))) - 1.0) &gt; 0.0 THEN SQRT(3.0) / 2.0 ELSE 0.0 END) - (CASE WHEN ((%2) - (CAST( ( (%2) / SQRT(3.0) ) AS NUMERIC(18, 0) ) * SQRT(3.0)) &lt; 0.0) AND ((CASE WHEN (ABS((%2) - (CAST( ( (%2) / SQRT(3.0) ) AS NUMERIC(18, 0) ) * SQRT(3.0)))) + SQRT(3.0) * ((ABS((%1) - (CAST( ( (%1) / 3.0 ) AS NUMERIC(18, 0) ) * 3.0))) - 1.0) &gt; 0.0 THEN SQRT(3.0) / 2.0 ELSE 0.0 END) &gt; 0.0) THEN SQRT(3.0) ELSE 0.0 END)) + (CAST( ( (%2) / SQRT(3.0) ) AS NUMERIC(18, 0) ) * SQRT(3.0))) AS NUMERIC(18,3) )</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='numeric' name='LN' return-type='real'>
      <formula>CASE WHEN %1 &gt; 0 THEN LN(%1) ELSE NULL END</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='LOG' return-type='real'>
      <formula>CASE WHEN %1 &gt; 0  THEN LOG(10,%1) ELSE NULL END</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='LOG' return-type='real'>
      <formula>CASE WHEN %1 &gt; 0 AND %2 &gt; 0 AND %2 &lt;&gt; 1 THEN LOG(%2,%1) ELSE NULL END</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='numeric' name='MAX' return-type='real'>
      <formula>GREATEST(%1, %2)</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='numeric' name='MAX' return-type='int'>
      <formula>GREATEST(%1, %2)</formula>
      <argument type='int' />
      <argument type='int' />
    </function>
    <function group='numeric' name='MIN' return-type='real'>
      <formula>LEAST(%1, %2)</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='numeric' name='MIN' return-type='int'>
      <formula>LEAST(%1, %2)</formula>
      <argument type='int' />
      <argument type='int' />
    </function>
    <function group='numeric' name='PI' return-type='real'>
      <formula>(4 * ATAN(1))</formula>
    </function>
    <function group='numeric' name='POWER' return-type='real'>
      <formula>CASE WHEN %1&gt;= 0 OR (%1 &lt; 0 AND (%2 - TRUNC(%2))=0)THEN POWER(%1,%2) ELSE NULL END</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='numeric' name='POWER' return-type='real'>
      <formula>(CASE WHEN %1 &lt; 0 AND {fn FLOOR(%2)} &lt;&gt; %2 THEN NULL ELSE {fn POWER(%1,%2)} END)</formula>
      <argument type='real' />
      <argument type='int' />
    </function>
    <function group='numeric' name='POWER' return-type='real'>
      <formula>POWER(%1,%2)</formula>
      <argument type='int' />
      <argument type='int' />
    </function>
    <function group='numeric' name='RADIANS' return-type='real'>
      <formula>(%1 * ATAN(1) / 45)</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='ROUND' return-type='real'>
      <formula>ROUND(%1)</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='ROUND' return-type='real'>
      <formula>ROUND(%1,%2)</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='numeric' name='SIGN' return-type='int'>
      <formula>SIGN(%1)</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='SIN' return-type='real'>
      <formula>SIN(%1)</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='SQRT' return-type='real'>
      <formula>CASE WHEN %1 &gt;= 0 THEN SQRT(%1) ELSE NULL END</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='SQUARE' return-type='real'>
      <formula>POWER(%1, 2)</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='SQUARE' return-type='int'>
      <formula>POWER(%1, 2)</formula>
      <argument type='int' />
    </function>
    <function group='numeric' name='TAN' return-type='real'>
      <formula>TAN(%1)</formula>
      <argument type='real' />
    </function>
    <function group='numeric;logical' name='ZN' return-type='real'>
      <formula>COALESCE(%1, 0)</formula>
      <argument type='real' />
    </function>
    <function group='numeric;logical' name='ZN' return-type='int'>
      <formula>COALESCE(%1, 0)</formula>
      <argument type='int' />
    </function>
    <function group='string' name='ASCII' return-type='int'>
      <formula>ASCII(LEFT(%1, 1))</formula>
      <argument type='str' />
    </function>
    <function group='string' name='CHAR' return-type='str'>
      <formula>(CASE WHEN ((%1 &gt;= 0) AND (%1 &lt; 128)) THEN CHR(%1) ELSE NULL END)</formula>
      <argument type='real' />
    </function>
    <function group='string' name='CHAR' return-type='str'>
      <formula>(CASE WHEN (%1 &gt;= 0) AND (%1 &lt; 256) THEN {fn CHAR(%1)} ELSE NULL END)</formula>
      <argument type='int' />
    </function>
    <function group='string' name='CONTAINS' return-type='bool'>
      <formula>(INSTR(%1,%2) &gt; 0)</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='string' name='ENDSWITH' return-type='bool'>
      <formula>(SUBSTR(RTRIM(%1), GREATEST(1, LENGTH(RTRIM(%1)) - LENGTH(%2) + 1), LENGTH(%2)) = %2)</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='string' name='FIND' return-type='int'>
      <formula>INSTR(%1,%2)</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='string' name='FIND' return-type='int'>
      <formula>INSTR(%1,%2,%3)</formula>
      <argument type='str' />
      <argument type='str' />
      <argument type='real' />
    </function>
    <function group='string' name='FIND' return-type='int'>
      <formula>(CASE&#10;&#9;WHEN (%3 IS NULL) THEN NULL&#10;&#9;WHEN %3 &lt; 1 THEN {fn LOCATE(%2,%1,1)}&#10;&#9;ELSE {fn LOCATE(%2,%1,%3)}&#10;&#9;END)</formula>
      <argument type='str' />
      <argument type='str' />
      <argument type='int' />
    </function>
    <function group='string' name='LEFT' return-type='str'>
      <formula>CASE WHEN %2 &gt;= 0 THEN {fn LEFT(%1,{fn FLOOR(%2)})} ELSE NULL END</formula>
      <argument type='str' />
      <argument type='real' />
    </function>
    <function group='string' name='LEFT' return-type='str'>
      <formula>CASE WHEN %2 &gt;= 0 THEN {fn LEFT(%1,%2)} ELSE NULL END</formula>
      <argument type='str' />
      <argument type='int' />
    </function>
    <function group='string' name='LEN' return-type='int'>
      <formula>LENGTH(%1)</formula>
      <argument type='str' />
    </function>
    <function group='string' name='LOWER' return-type='str'>
      <formula>LOWER(%1)</formula>
      <argument type='str' />
    </function>
    <function group='string' name='LTRIM' return-type='str'>
      <formula>LTRIM(%1)</formula>
      <argument type='str' />
    </function>
    <function group='string' name='MAX' return-type='str'>
      <formula>GREATEST(%1, %2)</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='string' name='MID' return-type='str'>
      <formula>MID(%1, CASE WHEN %2 = NULL THEN NULL WHEN %2 &lt; 0 THEN CEILING(%2) ELSE FLOOR(%2) END)</formula>
      <argument type='str' />
      <argument type='real' />
    </function>
    <function group='string' name='MID' return-type='str'>
      <formula>MID(%1, CASE WHEN %2 = NULL THEN NULL WHEN %2 &lt; 0 THEN CEILING(%2) ELSE FLOOR(%2) END)</formula>
      <argument type='str' />
      <argument type='int' />
    </function>
    <function group='string' name='MID' return-type='str'>
      <formula>MID(%1, CASE WHEN %2 = NULL THEN NULL WHEN %2 &lt; 0 THEN CEILING(%2) ELSE FLOOR(%2) END, FLOOR(%3))</formula>
      <argument type='str' />
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='string' name='MID' return-type='str'>
      <formula>MID(%1, CASE WHEN %2 = NULL THEN NULL WHEN %2 &lt; 0 THEN CEILING(%2) ELSE FLOOR(%2) END, FLOOR(%3))</formula>
      <argument type='str' />
      <argument type='int' />
      <argument type='int' />
    </function>
    <function group='string' name='MIN' return-type='str'>
      <formula>LEAST(%1, %2)</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='string' name='REPLACE' return-type='str'>
      <formula>REPLACE(%1,%2,%3)</formula>
      <argument type='str' />
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='string' name='RIGHT' return-type='str'>
      <formula>CASE WHEN %2 &gt;= 0 THEN {fn RIGHT(%1,{fn FLOOR(%2)})} ELSE NULL END</formula>
      <argument type='str' />
      <argument type='real' />
    </function>
    <function group='string' name='RIGHT' return-type='str'>
      <formula>CASE WHEN %2 &gt;= 0 THEN {fn RIGHT(%1,%2)} ELSE NULL END</formula>
      <argument type='str' />
      <argument type='int' />
    </function>
    <function group='string' name='RTRIM' return-type='str'>
      <formula>RTRIM(%1)</formula>
      <argument type='str' />
    </function>
    <function group='string' name='STARTSWITH' return-type='bool'>
      <formula>(SUBSTR(LTRIM(%1), 1, LENGTH(%2)) = %2)</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='string' name='TRIM' return-type='str'>
      <formula>TRIM(%1)</formula>
      <argument type='str' />
    </function>
    <function group='string' name='UPPER' return-type='str'>
      <formula>UPPER(%1)</formula>
      <argument type='str' />
    </function>
    <function group='string' name='SPACE' return-type='str'>
      <formula>CASE WHEN %1 &lt; 0 THEN NULL WHEN %1 = 0 THEN &apos;&apos; ELSE REPEAT(&apos; &apos;,%1) END</formula>
      <argument type='int' />
    </function>
    <function group='string' name='SPACE' return-type='str'>
      <formula>CASE WHEN %1 &lt; 0 THEN NULL WHEN %1 = 0 THEN &apos;&apos; ELSE REPEAT(&apos; &apos;,%1) END</formula>
      <argument type='real' />
    </function>
    <function group='date' name='DAY' return-type='int'>
      <formula>EXTRACT(DAY FROM %1)</formula>
      <argument type='datetime' />
    </function>
    <function group='date' name='ISOQUARTER' return-type='int'>
      <formula>(1 + LEAST(TRUNC((TO_NUMBER(TO_CHAR(%1, &apos;IW&apos;)) - 1) / 13), 3))</formula>
      <argument type='datetime' />
    </function>
    <function group='date' name='ISOWEEK' return-type='int'>
      <formula>TO_NUMBER(TO_CHAR(%1, &apos;IW&apos;))</formula>
      <argument type='datetime' />
    </function>
    <function group='date' name='ISOWEEKDAY' return-type='int'>
      <formula>TO_NUMBER(TO_CHAR(%1, &apos;ID&apos;))</formula>
      <argument type='datetime' />
    </function>
    <function group='date' name='ISOYEAR' return-type='int'>
      <formula>TO_NUMBER(TO_CHAR(%1, &apos;IYYY&apos;))</formula>
      <argument type='datetime' />
    </function>
    <function group='date' name='MAX' return-type='datetime'>
      <formula>GREATEST(%1, %2)</formula>
      <argument type='datetime' />
      <argument type='datetime' />
    </function>
    <function group='date' name='MAX' return-type='date'>
      <formula>GREATEST(%1, %2)</formula>
      <argument type='date' />
      <argument type='date' />
    </function>
    <function group='date' name='MIN' return-type='datetime'>
      <formula>LEAST(%1, %2)</formula>
      <argument type='datetime' />
      <argument type='datetime' />
    </function>
    <function group='date' name='MIN' return-type='date'>
      <formula>LEAST(%1, %2)</formula>
      <argument type='date' />
      <argument type='date' />
    </function>
    <function group='date' name='MONTH' return-type='int'>
      <formula>EXTRACT(MONTH FROM %1)</formula>
      <argument type='datetime' />
    </function>
    <function group='date' name='NOW' return-type='datetime'>
      <formula>CURRENT_TIMESTAMP</formula>
    </function>
    <function group='date' name='QUARTER' return-type='int'>
      <formula>(CAST( FLOOR( TRUNC((EXTRACT(MONTH FROM %2) - 1) / 3 + 1 )) AS INTEGER)</formula>
      <argument type='datetime' />
    </function>
    <function group='date' name='TODAY' return-type='date'>
      <formula>TRUNC(CURRENT_DATE, &apos;DD&apos;)</formula>
    </function>
    <function group='date' name='WEEK' return-type='int'>
      <formula>FLOOR((7 + TO_NUMBER(TO_CHAR(%1,&apos;DDD&apos;)) - 1 + TO_NUMBER(TO_CHAR(TRUNC(CAST(%1 AS DATE), &apos;YYYY&apos;), &apos;D&apos;)) - 1) / 7)</formula>
      <argument type='datetime' />
    </function>
    <function group='date' name='YEAR' return-type='int'>
      <formula>EXTRACT(YEAR FROM %1)</formula>
      <argument type='datetime' />
    </function>
    <function group='date' name='ISDATE' return-type='bool'>
      <formula>IS_DATE(%1)</formula>
      <argument type='str' />
    </function>
    <function group='cast' name='DATE' return-type='date'>
      <formula>(CAST(&apos;1900-01-01&apos; AS DATE) + CAST(%1 AS INTEGER))</formula>
      <argument type='real' />
    </function>
    <function group='cast' name='DATE' return-type='date'>
      <formula>({d &apos;1900-01-01&apos;} + %1)</formula>
      <argument type='int' />
    </function>
    <function group='cast' name='DATE' return-type='date'>
      <formula>TRUNC(TO_DATE(%1))</formula>
      <argument type='str' />
    </function>
    <function group='cast' name='DATE' return-type='date'>
      <formula>TRUNC(CAST(%1 AS DATE))</formula>
      <argument type='datetime' />
    </function>
    <function group='cast' name='DATETIME' return-type='datetime'>
      <formula>(CAST(CAST(&apos;1900-01-01&apos; AS DATE) + CAST(%1 AS INTEGER) AS TIMESTAMP) +  CAST((%1 - CAST(%1 AS INTEGER)) * 24 AS INTEGER) * INTERVAL &apos;1&apos; HOUR + CAST((%1 * 24  - CAST(%1 * 24 AS INTEGER)) * 60 AS INTEGER) * INTERVAL &apos;1&apos; MINUTE + CAST((%1 * 24 * 60  - CAST(%1 * 24 * 60 AS INTEGER)) * 60 AS DECIMAL(6)) * INTERVAL &apos;1&apos; SECOND)</formula>
      <argument type='real' />
    </function>
    <function group='cast' name='DATETIME' return-type='datetime'>
      <formula>TO_TIMESTAMP(%1)</formula>
      <argument type='str' />
    </function>
    <function group='cast' name='DATETIME' return-type='datetime'>
      <formula>TO_TIMESTAMP(%1)</formula>
      <argument type='datetime' />
    </function>
    <function group='cast' name='FLOAT' return-type='real'>
      <formula>(CASE&#10;&#9;WHEN %1 THEN 1.0&#10;&#9;WHEN NOT %1 THEN 0.0&#10;&#9;ELSE NULL END)</formula>
      <argument type='bool' />
    </function>
    <function group='cast' name='FLOAT' return-type='real'>
      <formula>(%1 + 0.0)</formula>
      <argument type='real' />
    </function>
    <function group='cast' name='FLOAT' return-type='real'>
      <formula>TO_NUMBER(%1)</formula>
      <argument type='str' />
    </function>
    <function group='cast' name='FLOAT' return-type='real'>
      <formula>TO_NUMBER(TO_CHAR(%1, &apos;J&apos;)) - 2415021.0 + ( (HOUR(%1) * 3600) + (MINUTE(%1) * 60) + SECOND(%1) ) / 86400.0</formula>
      <argument type='datetime' />
    </function>
    <function group='cast' name='FLOAT' return-type='real'>
      <formula>TO_NUMBER(TO_CHAR(%1, &apos;J&apos;)) - 2415021.0</formula>
      <argument type='date' />
    </function>
    <function group='cast' name='INT' return-type='int'>
      <formula>(CASE&#10;&#9;WHEN %1 THEN 1&#10;&#9;WHEN NOT %1 THEN 0&#10;&#9;ELSE NULL END)</formula>
      <argument type='bool' />
    </function>
    <function group='cast' name='INT' return-type='int'>
      <formula>ROUND(TRUNC(%1),0)</formula>
      <argument type='real' />
    </function>
    <function group='cast' name='INT' return-type='int'>
      <formula>ROUND(TRUNC(TO_NUMBER(%1)),0)</formula>
      <argument type='str' />
    </function>
    <function group='cast' name='INT' return-type='int'>
      <formula>(CAST(%1 AS DATE) - CAST(&apos;1900-01-01&apos; AS DATE))</formula>
      <argument type='datetime' />
    </function>
    <function group='cast' name='INT' return-type='int'>
      <formula>%1 - CAST(&apos;1900-01-01&apos; AS DATE)</formula>
      <argument type='date' />
    </function>
    <function group='cast' name='STR' return-type='str'>
      <formula>(CASE&#10;&#9;WHEN %1 THEN &apos;1&apos;&#10;&#9;WHEN NOT %1 THEN &apos;0&apos;&#10;&#9;ELSE NULL END)</formula>
      <argument type='bool' />
    </function>
    <function group='cast' name='STR' return-type='str'>
      <formula>TO_CHAR(%1)</formula>
      <argument type='real' />
    </function>
    <function group='cast' name='STR' return-type='str'>
      <formula>(%1)</formula>
      <argument type='str' />
    </function>
    <function group='cast' name='STR' return-type='str'>
      <formula>TO_CHAR(%1)</formula>
      <argument type='datetime' />
    </function>
    <function group='logical' name='IFNULL' return-type='bool'>
      <formula>(CASE WHEN %1 THEN 1 WHEN NOT %1 THEN 0 ELSE (CASE WHEN %2 THEN 1 WHEN NOT %2 THEN 0 ELSE NULL END) END)=1</formula>
      <argument type='bool' />
      <argument type='bool' />
    </function>
    <function group='logical' name='IFNULL' return-type='real'>
      <formula>COALESCE(%1, %2)</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='logical' name='IFNULL' return-type='int'>
      <formula>COALESCE(%1, %2)</formula>
      <argument type='int' />
      <argument type='int' />
    </function>
    <function group='logical' name='IFNULL' return-type='str'>
      <formula>COALESCE(%1, %2)</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='logical' name='IFNULL' return-type='datetime'>
      <formula>COALESCE(%1, %2)</formula>
      <argument type='datetime' />
      <argument type='datetime' />
    </function>
    <function group='logical' name='IFNULL' return-type='date'>
      <formula>COALESCE(%1, %2)</formula>
      <argument type='date' />
      <argument type='date' />
    </function>
    <function group='logical' name='IIF' return-type='bool'>
      <formula>((%1 AND %2) OR ((NOT %1) AND %3))</formula>
      <argument type='bool' />
      <argument type='bool' />
      <argument type='bool' />
    </function>
    <function group='logical' name='IIF' return-type='real'>
      <formula>(CASE WHEN %1 THEN %2 WHEN NOT %1 THEN %3 ELSE NULL END)</formula>
      <argument type='bool' />
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='logical' name='IIF' return-type='real'>
      <formula>(CASE WHEN %1 THEN %2 WHEN NOT %1 THEN %3 ELSE %4 END)</formula>
      <argument type='bool' />
      <argument type='real' />
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='logical' name='IIF' return-type='int'>
      <formula>(CASE WHEN %1 THEN %2 WHEN NOT %1 THEN %3 ELSE NULL END)</formula>
      <argument type='bool' />
      <argument type='int' />
      <argument type='int' />
    </function>
    <function group='logical' name='IIF' return-type='int'>
      <formula>(CASE WHEN %1 THEN %2 WHEN NOT %1 THEN %3 ELSE %4 END)</formula>
      <argument type='bool' />
      <argument type='int' />
      <argument type='int' />
      <argument type='int' />
    </function>
    <function group='logical' name='IIF' return-type='str'>
      <formula>(CASE WHEN %1 THEN %2 WHEN NOT %1 THEN %3 ELSE NULL END)</formula>
      <argument type='bool' />
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='logical' name='IIF' return-type='str'>
      <formula>(CASE WHEN %1 THEN %2 WHEN NOT %1 THEN %3 ELSE %4 END)</formula>
      <argument type='bool' />
      <argument type='str' />
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='logical' name='IIF' return-type='datetime'>
      <formula>(CASE WHEN %1 THEN %2 WHEN NOT %1 THEN %3 ELSE NULL END)</formula>
      <argument type='bool' />
      <argument type='datetime' />
      <argument type='datetime' />
    </function>
    <function group='logical' name='IIF' return-type='datetime'>
      <formula>(CASE WHEN %1 THEN %2 WHEN NOT %1 THEN %3 ELSE %4 END)</formula>
      <argument type='bool' />
      <argument type='datetime' />
      <argument type='datetime' />
      <argument type='datetime' />
    </function>
    <function group='logical' name='IIF' return-type='date'>
      <formula>(CASE WHEN %1 THEN %2 WHEN NOT %1 THEN %3 ELSE NULL END)</formula>
      <argument type='bool' />
      <argument type='date' />
      <argument type='date' />
    </function>
    <function group='logical' name='IIF' return-type='date'>
      <formula>(CASE WHEN %1 THEN %2 WHEN NOT %1 THEN %3 ELSE %4 END)</formula>
      <argument type='bool' />
      <argument type='date' />
      <argument type='date' />
      <argument type='date' />
    </function>
    <function group='logical' name='ISNULL' return-type='bool'>
      <formula>(CASE WHEN %1 THEN 0 WHEN NOT %1 THEN 0 ELSE 1 END)=1</formula>
      <argument type='bool' />
    </function>
    <function group='logical' name='ISNULL' return-type='bool'>
      <formula>%1 IS NULL</formula>
      <argument type='real' />
    </function>
    <function group='logical' name='ISNULL' return-type='bool'>
      <formula>%1 IS NULL</formula>
      <argument type='str' />
    </function>
    <function group='logical' name='ISNULL' return-type='bool'>
      <formula>%1 IS NULL</formula>
      <argument type='datetime' />
    </function>
    <function group='aggregate' name='AVG' return-type='real'>
      <formula>AVG(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='real' />
    </function>
    <function group='aggregate' name='CORR' return-type='real'>
      <formula>CORR(%1, %2)</formula>
      <unagg-formula>NULL</unagg-formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='aggregate' name='COUNT' return-type='int'>
      <formula>COUNT(CASE WHEN %1 THEN 1 WHEN NOT %1 THEN 0 ELSE NULL END)</formula>
      <unagg-formula>(CASE WHEN %1 THEN 1 WHEN NOT %1 THEN 1 ELSE 0 END)</unagg-formula>
      <argument type='bool' />
    </function>
    <function group='aggregate' name='COUNT' return-type='int'>
      <formula>COUNT(%1)</formula>
      <unagg-formula>(CASE WHEN %1 IS NULL THEN 0 ELSE 1 END)</unagg-formula>
      <argument type='real' />
    </function>
    <function group='aggregate' name='COUNT' return-type='int'>
      <formula>COUNT(%1)</formula>
      <unagg-formula>(CASE WHEN %1 IS NULL THEN 0 ELSE 1 END)</unagg-formula>
      <argument type='str' />
    </function>
    <function group='aggregate' name='COUNT' return-type='int'>
      <formula>COUNT(%1)</formula>
      <unagg-formula>(CASE WHEN %1 IS NULL THEN 0 ELSE 1 END)</unagg-formula>
      <argument type='datetime' />
    </function>
    <function group='aggregate' name='COUNTD' return-type='int'>
      <formula>COUNT(DISTINCT (CASE WHEN %1 THEN 1 WHEN NOT %1 THEN 0 ELSE NULL END))</formula>
      <unagg-formula>(CASE WHEN %1 THEN 1 WHEN NOT %1 THEN 1 ELSE 0 END)</unagg-formula>
      <argument type='bool' />
    </function>
    <function group='aggregate' name='COUNTD' return-type='int'>
      <formula>COUNT(DISTINCT %1)</formula>
      <unagg-formula>(CASE WHEN %1 IS NULL THEN 0 ELSE 1 END)</unagg-formula>
      <argument type='real' />
    </function>
    <function group='aggregate' name='COUNTD' return-type='int'>
      <formula>COUNT(DISTINCT %1)</formula>
      <unagg-formula>(CASE WHEN %1 IS NULL THEN 0 ELSE 1 END)</unagg-formula>
      <argument type='str' />
    </function>
    <function group='aggregate' name='COUNTD' return-type='int'>
      <formula>COUNT(DISTINCT %1)</formula>
      <unagg-formula>(CASE WHEN %1 IS NULL THEN 0 ELSE 1 END)</unagg-formula>
      <argument type='datetime' />
    </function>
    <function group='aggregate' name='COVAR' return-type='real'>
      <formula>COVAR_SAMP(%1, %2)</formula>
      <unagg-formula>NULL</unagg-formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='aggregate' name='COVARP' return-type='real'>
      <formula>COVAR_POP(%1, %2)</formula>
      <unagg-formula>(CASE WHEN %1 IS NULL THEN NULL WHEN %2 IS NULL THEN NULL ELSE 0.0 END</unagg-formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='aggregate' name='MAX' return-type='bool'>
      <formula>(MAX(CASE WHEN %1 THEN 1 WHEN NOT %1 THEN 0 ELSE NULL END)=1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='bool' />
    </function>
    <function group='aggregate' name='MAX' return-type='real'>
      <formula>MAX(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='real' />
    </function>
    <function group='aggregate' name='MAX' return-type='int'>
      <formula>MAX(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='int' />
    </function>
    <function group='aggregate' name='MAX' return-type='str'>
      <formula>MAX(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='str' />
    </function>
    <function group='aggregate' name='MAX' return-type='datetime'>
      <formula>MAX(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='datetime' />
    </function>
    <function group='aggregate' name='MAX' return-type='date'>
      <formula>MAX(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='date' />
    </function>
    <function group='aggregate' name='MEDIAN' return-type='real'>
      <formula>MEDIAN(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='real' />
    </function>
    <function group='aggregate' name='MIN' return-type='bool'>
      <formula>(MIN(CASE WHEN %1 THEN 1 WHEN NOT %1 THEN 0 ELSE NULL END)=1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='bool' />
    </function>
    <function group='aggregate' name='MIN' return-type='real'>
      <formula>MIN(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='real' />
    </function>
    <function group='aggregate' name='MIN' return-type='int'>
      <formula>MIN(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='int' />
    </function>
    <function group='aggregate' name='MIN' return-type='str'>
      <formula>MIN(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='str' />
    </function>
    <function group='aggregate' name='MIN' return-type='datetime'>
      <formula>MIN(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='datetime' />
    </function>
    <function group='aggregate' name='MIN' return-type='date'>
      <formula>MIN(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='date' />
    </function>
    <function group='aggregate' name='PERCENTILE' return-type='real'>
      <formula>PERCENTILE_CONT(%2) WITHIN GROUP (ORDER BY %1 ASC)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='real' />
      <argument type='localreal' />
    </function>
    <function group='aggregate' name='STDEV' return-type='real'>
      <formula>STDDEV_SAMP(%1)</formula>
      <unagg-formula>NULL</unagg-formula>
      <argument type='real' />
    </function>
    <function group='aggregate' name='STDEVP' return-type='real'>
      <formula>STDDEV_POP(%1)</formula>
      <unagg-formula>(CASE WHEN %1 IS NULL THEN NULL ELSE 0.0 END)</unagg-formula>
      <argument type='real' />
    </function>
    <function group='aggregate' name='SUM' return-type='real'>
      <formula>SUM(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='real' />
    </function>
    <function group='aggregate' name='SUM' return-type='int'>
      <formula>SUM(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='int' />
    </function>
    <function group='aggregate' name='VAR' return-type='real'>
      <formula>VAR_SAMP(%1)</formula>
      <unagg-formula>NULL</unagg-formula>
      <argument type='real' />
    </function>
    <function group='aggregate' name='VARP' return-type='real'>
      <formula>VAR_POP(%1)</formula>
      <unagg-formula>(CASE WHEN %1 IS NULL THEN NULL ELSE 0.0 END)</unagg-formula>
      <argument type='real' />
    </function>
    <function group='operator' name='!' return-type='bool'>
      <formula>(NOT %1)</formula>
      <argument type='bool' />
    </function>
    <function group='operator' name='!=' return-type='bool'>
      <formula>(%1 AND NOT %2 OR NOT %1 AND %2)</formula>
      <argument type='bool' />
      <argument type='bool' />
    </function>
    <function group='operator' name='!=' return-type='bool'>
      <formula>(%1 &lt;&gt; %2)</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='operator' name='!=' return-type='bool'>
      <formula>(%1 &lt;&gt; %2)</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='operator' name='!=' return-type='bool'>
      <formula>(%1 &lt;&gt; %2)</formula>
      <argument type='datetime' />
      <argument type='datetime' />
    </function>
    <function group='operator' name='%' return-type='real'>
      <formula>(CASE WHEN %2 = 0 THEN NULL ELSE MOD(%1,%2) END)</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='operator' name='%' return-type='int'>
      <formula>(CASE WHEN %2 = 0 THEN NULL ELSE MOD(%1,%2) END)</formula>
      <argument type='int' />
      <argument type='int' />
    </function>
    <function group='operator' name='&amp;&amp;' return-type='bool'>
      <formula>(%1 AND %2)</formula>
      <argument type='bool' />
      <argument type='bool' />
    </function>
    <function group='operator' name='*' return-type='real'>
      <formula>(%1 * %2)</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='operator' name='*' return-type='int'>
      <formula>(%1 * %2)</formula>
      <argument type='int' />
      <argument type='int' />
    </function>
    <function group='operator' name='+' return-type='real'>
      <formula>(%1 + %2)</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='operator' name='+' return-type='int'>
      <formula>(%1 + %2)</formula>
      <argument type='int' />
      <argument type='int' />
    </function>
    <function group='operator' name='+' return-type='str'>
      <formula>(CASE WHEN %1 IS NULL OR %2 IS NULL THEN NULL ELSE %1 || %2 END)</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='operator' name='+' return-type='datetime'>
      <formula>(%1 + NUMTODSINTERVAL(%2, &apos;day&apos;))</formula>
      <argument type='datetime' />
      <argument type='real' />
    </function>
    <function group='operator' name='+' return-type='datetime'>
      <formula>(CAST(%1 AS TIMESTAMP) + NUMTODSINTERVAL(%2, &apos;day&apos;))</formula>
      <argument type='date' />
      <argument type='real' />
    </function>
    <function group='operator' name='+' return-type='date'>
      <formula>(%1 + %2)</formula>
      <argument type='date' />
      <argument type='int' />
    </function>
    <function group='operator' name='-' return-type='real'>
      <formula>(-%1)</formula>
      <argument type='real' />
    </function>
    <function group='operator' name='-' return-type='real'>
      <formula>(%1 - %2)</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='operator' name='-' return-type='real'>
      <formula>SECONDS_BETWEEN(%1, %2) / (60*60*24)</formula>
      <argument type='datetime' />
      <argument type='datetime' />
    </function>
    <function group='operator' name='-' return-type='int'>
      <formula>(-%1)</formula>
      <argument type='int' />
    </function>
    <function group='operator' name='-' return-type='int'>
      <formula>(%1 - %2)</formula>
      <argument type='int' />
      <argument type='int' />
    </function>
    <function group='operator' name='-' return-type='datetime'>
      <formula>(%1 - NUMTODSINTERVAL(%2, &apos;day&apos;))</formula>
      <argument type='datetime' />
      <argument type='real' />
    </function>
    <function group='operator' name='-' return-type='datetime'>
      <formula>(CAST(%1 AS TIMESTAMP) - NUMTODSINTERVAL(%2, &apos;day&apos;))</formula>
      <argument type='date' />
      <argument type='real' />
    </function> 
    <function group='operator' name='-' return-type='date'>
      <formula>(%1 - %2)</formula>
      <argument type='date' />
      <argument type='int' />
    </function>
    <function group='operator' name='/' return-type='real'>
      <formula>(CASE WHEN %2 = 0 THEN NULL ELSE %1 / %2 END)</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='operator' name='&lt;' return-type='bool'>
      <formula>(%1 &lt; %2)</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='operator' name='&lt;' return-type='bool'>
      <formula>(%1 &lt; %2)</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='operator' name='&lt;' return-type='bool'>
      <formula>(%1 &lt; %2)</formula>
      <argument type='datetime' />
      <argument type='datetime' />
    </function>
    <function group='operator' name='&lt;=' return-type='bool'>
      <formula>(%1 &lt;= %2)</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='operator' name='&lt;=' return-type='bool'>
      <formula>(%1 &lt;= %2)</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='operator' name='&lt;=' return-type='bool'>
      <formula>(%1 &lt;= %2)</formula>
      <argument type='datetime' />
      <argument type='datetime' />
    </function>
    <function group='operator' name='==' return-type='bool'>
      <formula>(%1 AND %2 OR NOT %1 AND NOT %2)</formula>
      <argument type='bool' />
      <argument type='bool' />
    </function>
    <function group='operator' name='==' return-type='bool'>
      <formula>(%1 = %2)</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='operator' name='==' return-type='bool'>
      <formula>(%1 = %2)</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='operator' name='==' return-type='bool'>
      <formula>(%1 = %2)</formula>
      <argument type='datetime' />
      <argument type='datetime' />
    </function>
    <function group='operator' name='&gt;' return-type='bool'>
      <formula>(%1 &gt; %2)</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='operator' name='&gt;' return-type='bool'>
      <formula>(%1 &gt; %2)</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='operator' name='&gt;' return-type='bool'>
      <formula>(%1 &gt; %2)</formula>
      <argument type='datetime' />
      <argument type='datetime' />
    </function>
    <function group='operator' name='&gt;=' return-type='bool'>
      <formula>(%1 &gt;= %2)</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='operator' name='&gt;=' return-type='bool'>
      <formula>(%1 &gt;= %2)</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='operator' name='&gt;=' return-type='bool'>
      <formula>(%1 &gt;= %2)</formula>
      <argument type='datetime' />
      <argument type='datetime' />
    </function>
    <function group='operator' name='^^' return-type='real'>
      <formula>CASE WHEN %1&gt;= 0 OR (%1 &lt; 0 AND (%2 - TRUNC(%2))=0)THEN POWER(%1,%2) ELSE NULL END</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='operator' name='^^' return-type='real'>
      <formula>(CASE WHEN %1 &lt; 0 AND {fn FLOOR(%2)} &lt;&gt; %2 THEN NULL ELSE {fn POWER(%1,%2)} END)</formula>
      <argument type='real' />
      <argument type='int' />
    </function>
    <function group='operator' name='^^' return-type='real'>
      <formula>POWER(%1,%2)</formula>
      <argument type='int' />
      <argument type='int' />
    </function>
    <function group='operator' name='||' return-type='bool'>
      <formula>(%1 OR %2)</formula>
      <argument type='bool' />
      <argument type='bool' />
    </function>
    <function group='string' name='REGEXP_REPLACE' return-type='str'>
      <formula>REGEXP_REPLACE(%1, %2, %3)</formula>
      <argument type='str' />
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='string' name='REGEXP_MATCH' return-type='bool'>
      <formula>REGEXP_INSTR(%1, %2)&gt;0</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='string' name='REGEXP_EXTRACT' return-type='str'>
      <formula>REGEXP_SUBSTR(%1, %2)</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='string' name='REGEXP_EXTRACT_NTH' return-type='str'>
      <formula>REGEXP_SUBSTR(%1, %2, %3)</formula>
      <argument type='str' />
      <argument type='str' />
      <argument type='localint' />
    </function>
    <date-function name='DATEADD' return-type='datetime'>
      <formula>(%3 + %2 * INTERVAL &apos;1&apos; %1)</formula>
      <formula part='quarter'>ADD_MONTHS(%3, (3 * %2))</formula>
      <formula part='month'>ADD_MONTHS(%3, %2)</formula>
      <formula part='week'>(%3  + (7 * %2))</formula>
      <formula part='hour'>(CAST(%3 AS TIMESTAMP) + %2 * INTERVAL &apos;1&apos; HOUR)</formula>
      <formula part='minute'>(CAST(%3 AS TIMESTAMP) + %2 * INTERVAL &apos;1&apos; MINUTE)</formula>
      <formula part='second'>(CAST(%3 AS TIMESTAMP) + %2 * INTERVAL &apos;1&apos; SECOND)</formula>
      <argument type='localstr' />
      <argument type='int' />
      <argument type='datetime' />
    </date-function>
    <date-function name='DATEDIFF' return-type='int'>
      <formula> DAYS_BETWEEN(%3, %2)</formula>
      <formula part='year'>CASE WHEN %2 IS NULL OR %3 IS NULL THEN CAST(NULL AS INTEGER) ELSE (EXTRACT(YEAR FROM %3) - EXTRACT(YEAR FROM %2)) END</formula>
      <formula part='quarter'>FLOOR(MONTHS_BETWEEN(TRUNC( CAST(%3 AS DATE), &apos;Q&apos; ), TRUNC( CAST(%2 AS DATE), &apos;Q&apos; )) / 3)</formula>
      <formula part='month'>FLOOR(MONTHS_BETWEEN(TRUNC( CAST(%3 AS DATE), &apos;MONTH&apos; ), TRUNC( CAST(TO_DATE(%2, &apos;YYYY-MM-DD&apos;) AS DATE), &apos;MONTH&apos; )))</formula>
      <formula part='week'>FLOOR((DAYS_BETWEEN(%3, &apos;1995-01-01&apos;) - MOD(7 + TO_NUMBER(TO_CHAR(%3, &apos;D&apos;))- 1, 7) - DAYS_BETWEEN(%2, &apos;1995-01-01&apos;) + MOD(7 + TO_NUMBER(TO_CHAR(%2,&apos;D&apos;))- 1, 7))/7)</formula>
      <formula part='hour'>HOURS_BETWEEN(%3, %2)</formula>
      <formula part='minute'>MINUTES_BETWEEN(%3, %2)</formula>
      <formula part='second'>FLOOR(SECONDS_BETWEEN(%3, %2))</formula>
      <argument type='localstr' />
      <argument type='datetime' />
      <argument type='datetime' />
    </date-function>
    <date-function name='DATEDIFF' return-type='int'>
      <formula part='week'>FLOOR((DAYS_BETWEEN(%3, &apos;1995-01-01&apos;) - MOD(7 + TO_NUMBER(TO_CHAR(%3,&apos;D&apos;))- %4, 7) - DAYS_BETWEEN(%2, &apos;1995-01-01&apos;) + MOD(7 + TO_NUMBER(TO_CHAR(%2,&apos;D&apos;))- %4, 7))/7)</formula>
      <argument type='localstr' />
      <argument type='datetime' />
      <argument type='datetime' />
      <argument type='localstr' />
    </date-function>
    <date-function name='DATENAME' return-type='str'>
      <formula>EXTRACT(%1 FROM %2)</formula>
      <formula part='quarter'>CAST( TRUNC((EXTRACT(MONTH FROM %2) - 1) / 3 + 1) AS INTEGER)</formula>
      <formula part='month'>RTRIM(TO_CHAR(%2, &apos;MONTH&apos;), &apos; &apos;)</formula>
      <formula part='dayofyear'>RTRIM(TO_CHAR(%2, &apos;DDD&apos;), &apos; &apos;)</formula>
      <formula part='weekday'>RTRIM(TO_CHAR(%2, &apos;DAY&apos;), &apos; &apos;)</formula>
      <formula part='week'>TO_CHAR(FLOOR((7 + TO_NUMBER(TO_CHAR(%2, &apos;DDD&apos;)) - 1 + TO_NUMBER(TO_CHAR(TRUNC(CAST(%2 AS DATE), &apos;YYYY&apos;), &apos;D&apos;)) - 1) / 7))</formula>
      <argument type='localstr' />
      <argument type='datetime' />
    </date-function>
    <date-function name='DATENAME' return-type='str'>
      <formula part='week'>TO_CHAR(FLOOR((7 + TO_NUMBER(TO_CHAR(%2, &apos;DDD&apos;)) - 1 + MOD(7 + TO_NUMBER(TO_CHAR(TRUNC(CAST(%2 AS DATE), &apos;YYYY&apos;), &apos;D&apos;)) - %3, 7))/ 7))</formula>
      <argument type='localstr' />
      <argument type='datetime' />
      <argument type='localstr' />
    </date-function>
    <date-function name='DATEPART' return-type='int'>
      <formula>CAST(EXTRACT(%1 FROM %2) AS DECIMAL(36,0))</formula>
      <formula part='quarter'>CAST( FLOOR( TRUNC((EXTRACT(MONTH FROM %2) - 1) / 3 + 1 )) AS INTEGER)</formula>
      <formula part='dayofyear'>TO_NUMBER(TO_CHAR(%2,&apos;DDD&apos;))</formula>
      <formula part='weekday'>TO_NUMBER(TO_CHAR(%2,&apos;D&apos;))</formula>
      <formula part='week'>FLOOR((7 + TO_NUMBER(TO_CHAR(%2,&apos;DDD&apos;)) - 1 + TO_NUMBER(TO_CHAR(TRUNC(CAST(%2 AS DATE), &apos;YYYY&apos;), &apos;D&apos;)) - 1) / 7)</formula>
      <argument type='localstr' />
      <argument type='datetime' />
    </date-function>
    <date-function name='DATEPART' return-type='int'>
      <formula part='week'>FLOOR((7 + TO_NUMBER(TO_CHAR(%2,&apos;DDD&apos;)) - 1 + MOD(7 + TO_NUMBER(TO_CHAR(TRUNC(CAST(%2 AS DATE), &apos;YYYY&apos;), &apos;D&apos;)) - %3, 7))/ 7)</formula>
      <argument type='localstr' />
      <argument type='datetime' />
      <argument type='localstr' />
    </date-function>
    <date-function name='DATETRUNC' return-type='datetime'>
      <formula>DATE_TRUNC( &apos;%1&apos;, %2 )</formula>
      <argument type='localstr' />
      <argument type='datetime' />
    </date-function>
    <date-function name='DATETRUNC' return-type='datetime'>
      <formula part='week'>DATE_TRUNC(&apos;DAY&apos;,%2) - MOD(CAST(TO_CHAR(%2, &apos;D&apos;) AS INT) + 7 - %3, 7)</formula>
      <argument type='localstr' />
      <argument type='datetime' />
      <argument type='localstr' />
    </date-function>
  </function-map>
  <supported-aggregations>
    <aggregation value='AGG_COUNT'/>
    <aggregation value='AGG_COUNTD'/>
    <aggregation value='AGG_SUM'/>
    <aggregation value='AGG_AVG'/>
    <aggregation value='AGG_MIN'/>
    <aggregation value='AGG_MAX'/>
    <aggregation value='AGG_STDEV'/>
    <aggregation value='AGG_STDEVP'/>
    <aggregation value='AGG_VAR'/>
    <aggregation value='AGG_VARP'/>
    <aggregation value='AGG_COVAR'/>
    <aggregation value='AGG_COVARP'/>
    <aggregation value='AGG_CORR'/>
    <aggregation value='AGG_MEDIAN'/>
    <aggregation value='AGG_PERCENTILE'/>

    <aggregation value='AGG_YEAR'/>
    <aggregation value='AGG_QTR'/>
    <aggregation value='AGG_MONTH'/>
    <aggregation value='AGG_DAY'/>
    <aggregation value='AGG_WEEK'/>
    <aggregation value='AGG_WEEKDAY'/>
    <aggregation value='AGG_MONTHYEAR'/>
    <aggregation value='AGG_MDY'/>
    <aggregation value='AGG_HOUR'/>
    <aggregation value='AGG_MINUTE'/>
    <aggregation value='AGG_SECOND'/>

    <aggregation value='TRUNC_YEAR'/>
    <aggregation value='TRUNC_QTR'/>
    <aggregation value='TRUNC_MONTH'/>
    <aggregation value='TRUNC_DAY'/>
    <aggregation value='TRUNC_WEEK'/>
    <aggregation value='TRUNC_HOUR'/>
    <aggregation value='TRUNC_MINUTE'/>
    <aggregation value='TRUNC_SECOND'/>
  </supported-aggregations>
  <sql-format>
    <date-parts>
      <date-part-group>
        <part name='year' value='YEAR' />
        <part name='quarter' value='QUARTER' />
        <part name='month' value='MONTH' />
        <part name='week' value='WEEK' />
        <part name='weekday' value='DAY' />
        <part name='dayofyear' value='DAY' />
        <part name='day' value='DAY' />
        <part name='hour' value='HOUR' />
        <part name='minute' value='MINUTE' />
        <part name='second' value='SECOND' />
      </date-part-group>
      <date-part-group>
        <date-function name='DATETRUNC' />
        <part name='year' value='year' />
        <part name='quarter' value='quarter' />
        <part name='month' value='month' />
        <part name='week' value='week' />
        <part name='weekday' value='day' />
        <part name='dayofyear' value='day' />
        <part name='day' value='day' />
        <part name='hour' value='hour' />
        <part name='minute' value='minute' />
        <part name='second' value='second' />
      </date-part-group>
    </date-parts>
    <format-date-literal formula="{d '%1'}"  format='yyyy-MM-dd' />
    <format-datetime-literal formula="{ts '%1'}" format='yyyy-MM-dd HH:mm:ss.SSS' />
    <format-false literal='0' predicate='(0 &lt;&gt; 0)' />
    <format-order-by value='Nulls' />
    <format-select>
      <part name='Select' value='SELECT %1' />
      <part name='From' value='FROM %1' />
      <part name='Where' value='WHERE %1' />
      <part name='Group' value='GROUP BY %1' />
      <part name='Having' value='HAVING %1' />
      <part name='OrderBy' value='ORDER BY %1' />
      <part name='Top' value='LIMIT %1' />
    </format-select>
    <format-true literal='1' predicate='(1 &lt;&gt; 0)' />
    <id-allowed-characters value='_ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz~@#$%^&amp;*_-+=\}{&quot;&apos;;:?/&gt;&lt;,![]|' />
    <id-max-length value='127' />
    <id-quotes value='"' />
    <start-of-week-offset value='1' />
    <supported-joins>
      <part name='Inner' />
      <part name='Left' />
      <part name='Right' />
      <part name='Full' />
      <part name='Cross' />
    </supported-joins>
  </sql-format>
</dialect>
